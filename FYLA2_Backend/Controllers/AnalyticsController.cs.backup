using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using FYLA2_Backend.Data;
using FYLA2_Backend.DTOs;
using System.Security.Claims;

namespace FYLA2_Backend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class AnalyticsController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public AnalyticsController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet("provider/{providerId}")]
        public async Task<ActionResult<ProviderAnalyticsDto>> GetProviderAnalytics(string providerId, [FromQuery] int days = 30)
        {
            try
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                    return Unauthorized();

                // Check if user is the provider or has admin access
                var provider = await _context.Providers.FirstOrDefaultAsync(p => p.Id == providerId);
                if (provider == null)
                    return NotFound("Provider not found");

                if (provider.UserId != userId)
                    return Forbid("Access denied");

                var endDate = DateTime.UtcNow;
                var startDate = endDate.AddDays(-days);

                // Get bookings data
                var bookings = await _context.Bookings
                    .Where(b => b.ProviderId == providerId && b.Date >= startDate)
                    .Include(b => b.Service)
                    .Include(b => b.Client)
                    .ToListAsync();

                var totalRevenue = bookings.Where(b => b.Status == "completed").Sum(b => b.TotalPrice);
                var totalBookings = bookings.Count;
                var completedBookings = bookings.Count(b => b.Status == "completed");
                var cancelledBookings = bookings.Count(b => b.Status == "cancelled");

                // Calculate growth (compared to previous period)
                var previousStartDate = startDate.AddDays(-days);
                var previousBookings = await _context.Bookings
                    .Where(b => b.ProviderId == providerId && 
                           b.Date >= previousStartDate && 
                           b.Date < startDate)
                    .ToListAsync();

                var previousRevenue = previousBookings.Where(b => b.Status == "completed").Sum(b => b.TotalPrice);
                var previousBookingCount = previousBookings.Count;

                var revenueGrowth = previousRevenue > 0 ? 
                    ((totalRevenue - previousRevenue) / previousRevenue) * 100 : 0;
                var bookingGrowth = previousBookingCount > 0 ? 
                    ((double)(totalBookings - previousBookingCount) / previousBookingCount) * 100 : 0;

                // Get average rating
                var reviews = await _context.Reviews
                    .Where(r => r.ProviderId == providerId)
                    .ToListAsync();
                var averageRating = reviews.Any() ? reviews.Average(r => r.Rating) : 0;

                // Top services
                var topServices = bookings
                    .GroupBy(b => new { b.ServiceId, b.Service.Name })
                    .Select(g => new ServiceAnalyticsDto
                    {
                        ServiceId = g.Key.ServiceId,
                        ServiceName = g.Key.Name,
                        BookingCount = g.Count(),
                        Revenue = g.Where(b => b.Status == "completed").Sum(b => b.TotalPrice),
                        AverageRating = reviews.Where(r => r.ServiceId == g.Key.ServiceId).Any() ?
                            reviews.Where(r => r.ServiceId == g.Key.ServiceId).Average(r => r.Rating) : 0,
                        AveragePrice = g.Average(b => b.TotalPrice)
                    })
                    .OrderByDescending(s => s.Revenue)
                    .Take(5)
                    .ToList();

                // Revenue history (daily)
                var revenueHistory = bookings
                    .Where(b => b.Status == "completed")
                    .GroupBy(b => b.Date.Date)
                    .Select(g => new RevenueDataPoint
                    {
                        Date = g.Key.ToString("yyyy-MM-dd"),
                        Amount = g.Sum(b => b.TotalPrice)
                    })
                    .OrderBy(r => r.Date)
                    .ToList();

                // Booking history (daily)
                var bookingHistory = bookings
                    .GroupBy(b => b.Date.Date)
                    .Select(g => new BookingDataPoint
                    {
                        Date = g.Key.ToString("yyyy-MM-dd"),
                        Count = g.Count()
                    })
                    .OrderBy(b => b.Date)
                    .ToList();

                // Top clients
                var topClients = bookings
                    .GroupBy(b => new { b.ClientId, b.Client.FirstName, b.Client.LastName, b.Client.ProfilePicture })
                    .Select(g => new ClientInsightDto
                    {
                        ClientId = g.Key.ClientId,
                        ClientName = $"{g.Key.FirstName} {g.Key.LastName}",
                        ClientImage = g.Key.ProfilePicture ?? "",
                        TotalBookings = g.Count(),
                        TotalSpent = g.Where(b => b.Status == "completed").Sum(b => b.TotalPrice),
                        LastBookingDate = g.Max(b => b.Date).ToString("yyyy-MM-dd"),
                        PreferredService = g.GroupBy(x => x.Service.Name)
                            .OrderByDescending(x => x.Count())
                            .FirstOrDefault()?.Key ?? ""
                    })
                    .OrderByDescending(c => c.TotalSpent)
                    .Take(10)
                    .ToList();

                var analytics = new ProviderAnalyticsDto
                {
                    ProviderId = providerId,
                    ProviderName = $"{provider.FirstName} {provider.LastName}",
                    TotalRevenue = totalRevenue,
                    TotalBookings = totalBookings,
                    CompletedBookings = completedBookings,
                    CancelledBookings = cancelledBookings,
                    AverageRating = averageRating,
                    TotalReviews = reviews.Count,
                    RevenueGrowth = revenueGrowth,
                    BookingGrowth = bookingGrowth,
                    TopServices = topServices,
                    RevenueHistory = revenueHistory,
                    BookingHistory = bookingHistory,
                    TopClients = topClients
                };

                return Ok(analytics);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Error retrieving analytics", error = ex.Message });
            }
        }

        [HttpGet("client/{clientId}")]
        public async Task<ActionResult<ClientAnalyticsDto>> GetClientAnalytics(string clientId, [FromQuery] int months = 6)
        {
            try
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                    return Unauthorized();

                var client = await _context.Users.FirstOrDefaultAsync(u => u.Id == clientId);
                if (client == null)
                    return NotFound("Client not found");

                // Check if user is the client or has admin access
                if (client.Id != userId)
                    return Forbid("Access denied");

                var endDate = DateTime.UtcNow;
                var startDate = endDate.AddMonths(-months);

                // Get client bookings
                var bookings = await _context.Bookings
                    .Where(b => b.ClientId == clientId && b.Date >= startDate)
                    .Include(b => b.Service)
                    .Include(b => b.Provider)
                    .ToListAsync();

                var totalSpent = bookings.Where(b => b.Status == "completed").Sum(b => b.TotalPrice);
                var totalBookings = bookings.Count;
                var completedBookings = bookings.Count(b => b.Status == "completed");
                var cancelledBookings = bookings.Count(b => b.Status == "cancelled");

                // Favorite provider and service
                var favoriteProvider = bookings
                    .GroupBy(b => new { b.ProviderId, b.Provider.FirstName, b.Provider.LastName })
                    .OrderByDescending(g => g.Count())
                    .FirstOrDefault();

                var favoriteService = bookings
                    .GroupBy(b => b.Service.Name)
                    .OrderByDescending(g => g.Count())
                    .FirstOrDefault();

                // Recent bookings
                var recentBookings = bookings
                    .OrderByDescending(b => b.Date)
                    .Take(10)
                    .Select(b => new BookingHistoryDto
                    {
                        BookingId = b.Id,
                        ServiceName = b.Service.Name,
                        ProviderName = $"{b.Provider.FirstName} {b.Provider.LastName}",
                        Date = b.Date.ToString("yyyy-MM-dd"),
                        Status = b.Status,
                        Price = b.TotalPrice
                    })
                    .ToList();

                // Spending history (monthly)
                var spendingHistory = bookings
                    .Where(b => b.Status == "completed")
                    .GroupBy(b => new { Year = b.Date.Year, Month = b.Date.Month })
                    .Select(g => new SpendingDataPoint
                    {
                        Month = $"{g.Key.Year}-{g.Key.Month:00}",
                        Amount = g.Sum(b => b.TotalPrice)
                    })
                    .OrderBy(s => s.Month)
                    .ToList();

                // Service preferences
                var servicePreferences = bookings
                    .GroupBy(b => b.Service.Category)
                    .Select(g => new ServicePreferenceDto
                    {
                        ServiceCategory = g.Key,
                        BookingCount = g.Count(),
                        TotalSpent = g.Where(b => b.Status == "completed").Sum(b => b.TotalPrice),
                        Percentage = totalBookings > 0 ? (double)g.Count() / totalBookings * 100 : 0
                    })
                    .OrderByDescending(s => s.BookingCount)
                    .ToList();

                var analytics = new ClientAnalyticsDto
                {
                    ClientId = clientId,
                    ClientName = $"{client.FirstName} {client.LastName}",
                    TotalSpent = totalSpent,
                    TotalBookings = totalBookings,
                    CompletedBookings = completedBookings,
                    CancelledBookings = cancelledBookings,
                    FavoriteProvider = favoriteProvider != null ? 
                        $"{favoriteProvider.Key.FirstName} {favoriteProvider.Key.LastName}" : "",
                    FavoriteService = favoriteService?.Key ?? "",
                    RecentBookings = recentBookings,
                    SpendingHistory = spendingHistory,
                    ServicePreferences = servicePreferences
                };

                return Ok(analytics);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Error retrieving client analytics", error = ex.Message });
            }
        }

        [HttpGet("dashboard")]
        public async Task<ActionResult<object>> GetDashboardData()
        {
            try
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (string.IsNullOrEmpty(userId))
                    return Unauthorized();

                var user = await _context.Users.FirstOrDefaultAsync(u => u.Id == userId);
                if (user == null)
                    return NotFound("User not found");

                // Check if user is a provider
                var provider = await _context.Providers.FirstOrDefaultAsync(p => p.UserId == userId);
                
                if (provider != null)
                {
                    // Return provider dashboard data
                    var todayBookings = await _context.Bookings
                        .Where(b => b.ProviderId == provider.Id && b.Date.Date == DateTime.Today)
                        .Include(b => b.Client)
                        .Include(b => b.Service)
                        .OrderBy(b => b.Time)
                        .Select(b => new ScheduleSlotDto
                        {
                            Id = b.Id,
                            ClientName = $"{b.Client.FirstName} {b.Client.LastName}",
                            ClientPhone = b.Client.PhoneNumber ?? "",
                            ServiceName = b.Service.Name,
                            StartTime = b.Time.ToString(@"hh\:mm"),
                            EndTime = b.Time.Add(TimeSpan.FromMinutes(b.Service.Duration)).ToString(@"hh\:mm"),
                            Duration = b.Service.Duration,
                            Status = b.Status,
                            TotalPrice = b.TotalPrice,
                            Notes = b.Notes ?? ""
                        })
                        .ToListAsync();

                    var thisWeekRevenue = await _context.Bookings
                        .Where(b => b.ProviderId == provider.Id && 
                               b.Date >= DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek) &&
                               b.Status == "completed")
                        .SumAsync(b => b.TotalPrice);

                    var pendingBookings = await _context.Bookings
                        .CountAsync(b => b.ProviderId == provider.Id && b.Status == "pending");

                    return Ok(new
                    {
                        userType = "provider",
                        todayBookings,
                        thisWeekRevenue,
                        pendingBookings,
                        totalBookingsToday = todayBookings.Count
                    });
                }
                else
                {
                    // Return client dashboard data
                    var upcomingBookings = await _context.Bookings
                        .Where(b => b.ClientId == userId && b.Date >= DateTime.Today && b.Status != "cancelled")
                        .Include(b => b.Provider)
                        .Include(b => b.Service)
                        .OrderBy(b => b.Date)
                        .Take(5)
                        .Select(b => new BookingDto
                        {
                            Id = b.Id,
                            ServiceName = b.Service.Name,
                            ProviderName = $"{b.Provider.FirstName} {b.Provider.LastName}",
                            ProviderImage = b.Provider.ProfilePicture ?? "",
                            Date = b.Date.ToString("yyyy-MM-dd"),
                            Time = b.Time.ToString(@"hh\:mm"),
                            Status = b.Status,
                            TotalPrice = b.TotalPrice
                        })
                        .ToListAsync();

                    var totalSpentThisMonth = await _context.Bookings
                        .Where(b => b.ClientId == userId && 
                               b.Date.Month == DateTime.Today.Month &&
                               b.Date.Year == DateTime.Today.Year &&
                               b.Status == "completed")
                        .SumAsync(b => b.TotalPrice);

                    var totalBookingsThisMonth = await _context.Bookings
                        .CountAsync(b => b.ClientId == userId && 
                                   b.Date.Month == DateTime.Today.Month &&
                                   b.Date.Year == DateTime.Today.Year);

                    return Ok(new
                    {
                        userType = "client",
                        upcomingBookings,
                        totalSpentThisMonth,
                        totalBookingsThisMonth,
                        nextAppointment = upcomingBookings.FirstOrDefault()
                    });
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Error retrieving dashboard data", error = ex.Message });
            }
        }
    }
}
