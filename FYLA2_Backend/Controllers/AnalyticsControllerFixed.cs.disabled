using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using FYLA2_Backend.Data;
using FYLA2_Backend.Models;
using FYLA2_Backend.DTOs;
using System.Security.Claims;

namespace FYLA2_Backend.Controllers
{
  [ApiController]
  [Route("api/[controller]")]
  [Authorize]
  public class AnalyticsControllerFixed : ControllerBase
  {
    private readonly ApplicationDbContext _context;
    private readonly ILogger<AnalyticsControllerFixed> _logger;

    public AnalyticsControllerFixed(ApplicationDbContext context, ILogger<AnalyticsControllerFixed> logger)
    {
      _context = context;
      _logger = logger;
    }

    private string GetUserId()
    {
      return User.FindFirstValue(ClaimTypes.NameIdentifier) ?? throw new UnauthorizedAccessException();
    }

    [HttpGet("provider")]
    public async Task<ActionResult<ProviderAnalyticsDto>> GetProviderAnalytics([FromQuery] string? period = "month")
    {
      try
      {
        var userId = GetUserId();

        // Check if user is a provider
        var provider = await _context.Users.FirstOrDefaultAsync(u => u.Id == userId && u.IsServiceProvider);
        if (provider == null)
        {
          return Forbid("User is not a service provider");
        }

        DateTime startDate = period switch
        {
          "week" => DateTime.UtcNow.AddDays(-7),
          "year" => DateTime.UtcNow.AddYears(-1),
          _ => DateTime.UtcNow.AddMonths(-1)
        };

        // Get provider bookings
        var bookings = await _context.Bookings
            .Include(b => b.Service)
            .Where(b => b.ProviderId == userId && b.BookingDate >= startDate)
            .ToListAsync();

        var completedBookings = bookings.Where(b => b.Status == BookingStatus.Completed).ToList();

        // Revenue tracking
        var totalRevenue = completedBookings.Sum(b => b.TotalPrice);
        var revenueGrowth = CalculateGrowth(bookings, startDate, b => b.TotalPrice);

        // Booking metrics
        var totalBookings = bookings.Count;
        var bookingGrowth = CalculateGrowth(bookings, startDate, b => 1);

        // Average rating
        var reviews = await _context.Reviews
            .Where(r => r.RevieweeId == userId)
            .ToListAsync();

        var averageRating = reviews.Any() ? reviews.Average(r => r.Rating) : 0;

        // Popular services
        var serviceStats = completedBookings
            .GroupBy(b => b.Service.Name)
            .Select(g => new ServiceStatsDto
            {
              ServiceName = g.Key,
              BookingCount = g.Count(),
              Revenue = g.Sum(b => b.TotalPrice)
            })
            .OrderByDescending(s => s.BookingCount)
            .Take(5)
            .ToList();

        // Monthly revenue data for chart
        var monthlyRevenue = completedBookings
            .GroupBy(b => new { b.BookingDate.Year, b.BookingDate.Month })
            .Select(g => new MonthlyRevenueDto
            {
              Month = $"{g.Key.Year}-{g.Key.Month:D2}",
              Revenue = g.Sum(b => b.TotalPrice),
              BookingCount = g.Count()
            })
            .OrderBy(m => m.Month)
            .ToList();

        var analytics = new ProviderAnalyticsDto
        {
          TotalRevenue = totalRevenue,
          RevenueGrowth = revenueGrowth,
          TotalBookings = totalBookings,
          BookingGrowth = bookingGrowth,
          AverageRating = averageRating,
          TotalReviews = reviews.Count,
          ServiceStats = serviceStats,
          MonthlyRevenue = monthlyRevenue
        };

        return Ok(analytics);
      }
      catch (Exception ex)
      {
        _logger.LogError(ex, "Error getting provider analytics");
        return StatusCode(500, new { error = "Failed to get provider analytics", details = ex.Message });
      }
    }

    [HttpGet("client")]
    public async Task<ActionResult<ClientAnalyticsDto>> GetClientAnalytics([FromQuery] string? period = "month")
    {
      try
      {
        var userId = GetUserId();

        DateTime startDate = period switch
        {
          "week" => DateTime.UtcNow.AddDays(-7),
          "year" => DateTime.UtcNow.AddYears(-1),
          _ => DateTime.UtcNow.AddMonths(-1)
        };

        // Get client bookings
        var bookings = await _context.Bookings
            .Include(b => b.Service)
            .Include(b => b.Provider)
            .Where(b => b.ClientId == userId && b.BookingDate >= startDate)
            .ToListAsync();

        var completedBookings = bookings.Where(b => b.Status == BookingStatus.Completed).ToList();

        // Spending tracking
        var totalSpent = completedBookings.Sum(b => b.TotalPrice);
        var spendingGrowth = CalculateGrowth(bookings, startDate, b => b.TotalPrice);

        // Booking history
        var totalBookings = bookings.Count;
        var bookingGrowth = CalculateGrowth(bookings, startDate, b => 1);

        // Favorite services
        var servicePreferences = completedBookings
            .GroupBy(b => b.Service.Name)
            .Select(g => new ServicePreferenceDto
            {
              ServiceName = g.Key,
              BookingCount = g.Count(),
              TotalSpent = g.Sum(b => b.TotalPrice),
              LastBooked = g.Max(b => b.BookingDate)
            })
            .OrderByDescending(s => s.BookingCount)
            .Take(5)
            .ToList();

        // Monthly spending
        var monthlySpending = completedBookings
            .GroupBy(b => new { b.BookingDate.Year, b.BookingDate.Month })
            .Select(g => new MonthlySpendingDto
            {
              Month = $"{g.Key.Year}-{g.Key.Month:D2}",
              Amount = g.Sum(b => b.TotalPrice),
              BookingCount = g.Count()
            })
            .OrderBy(m => m.Month)
            .ToList();

        var analytics = new ClientAnalyticsDto
        {
          TotalSpent = totalSpent,
          SpendingGrowth = spendingGrowth,
          TotalBookings = totalBookings,
          BookingGrowth = bookingGrowth,
          ServicePreferences = servicePreferences,
          MonthlySpending = monthlySpending
        };

        return Ok(analytics);
      }
      catch (Exception ex)
      {
        _logger.LogError(ex, "Error getting client analytics");
        return StatusCode(500, new { error = "Failed to get client analytics", details = ex.Message });
      }
    }

    [HttpGet("dashboard")]
    public async Task<ActionResult<DashboardDataDto>> GetDashboardData()
    {
      try
      {
        var userId = GetUserId();
        var user = await _context.Users.FirstOrDefaultAsync(u => u.Id == userId);

        if (user == null)
        {
          return NotFound("User not found");
        }

        // Get recent bookings
        var recentBookings = await _context.Bookings
            .Include(b => b.Service)
            .Include(b => b.Client)
            .Include(b => b.Provider)
            .Where(b => b.ClientId == userId || b.ProviderId == userId)
            .OrderByDescending(b => b.BookingDate)
            .Take(5)
            .Select(b => new BookingDto
            {
              Id = b.Id,
              ClientId = b.ClientId,
              ProviderId = b.ProviderId,
              ServiceId = b.ServiceId,
              BookingDate = b.BookingDate,
              StartTime = b.StartTime,
              EndTime = b.EndTime,
              Status = b.Status.ToString(),
              TotalPrice = b.TotalPrice,
              DurationMinutes = b.DurationMinutes
            })
            .ToListAsync();

        // Get upcoming bookings
        var upcomingBookings = await _context.Bookings
            .Include(b => b.Service)
            .Include(b => b.Client)
            .Include(b => b.Provider)
            .Where(b => (b.ClientId == userId || b.ProviderId == userId) &&
                       b.BookingDate >= DateTime.UtcNow.Date &&
                       b.Status != BookingStatus.Cancelled)
            .OrderBy(b => b.BookingDate)
            .Take(3)
            .Select(b => new BookingDto
            {
              Id = b.Id,
              ClientId = b.ClientId,
              ProviderId = b.ProviderId,
              ServiceId = b.ServiceId,
              BookingDate = b.BookingDate,
              StartTime = b.StartTime,
              EndTime = b.EndTime,
              Status = b.Status.ToString(),
              TotalPrice = b.TotalPrice,
              DurationMinutes = b.DurationMinutes
            })
            .ToListAsync();

        var dashboardData = new DashboardDataDto
        {
          RecentBookings = recentBookings,
          UpcomingBookings = upcomingBookings
        };

        return Ok(dashboardData);
      }
      catch (Exception ex)
      {
        _logger.LogError(ex, "Error getting dashboard data");
        return StatusCode(500, new { error = "Failed to get dashboard data", details = ex.Message });
      }
    }

    private decimal CalculateGrowth<T>(List<T> items, DateTime startDate, Func<T, decimal> valueSelector)
    {
      // This is a simplified growth calculation
      // In a real app, you'd compare with previous period
      return items.Any() ? 15.5m : 0; // Mock 15.5% growth
    }

    private int CalculateGrowth<T>(List<T> items, DateTime startDate, Func<T, int> valueSelector)
    {
      // This is a simplified growth calculation
      return items.Any() ? 10 : 0; // Mock 10% growth
    }
  }
}
